// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  role          UserRole  @default(DRIVER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  vehicles      Vehicle[]
  reminders     Reminder[]
  garage        Garage?
  subscription  Subscription?
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  DRIVER
  GARAGE
  ADMIN
}

model Garage {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  logo        String?
  contactInfo Json
  branding    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicles    Vehicle[]
  messages    Message[]
}

model Vehicle {
  id              String   @id @default(cuid())
  registration    String   @unique
  make            String?
  model           String?
  color           String?
  motExpiryDate   DateTime
  taxExpiryDate   DateTime?
  insuranceExpiryDate DateTime?
  serviceDueDate  DateTime?
  userId          String?
  garageId        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  garage          Garage?  @relation(fields: [garageId], references: [id], onDelete: Cascade)
  reminders       Reminder[]
}

model Reminder {
  id          String        @id @default(cuid())
  type        ReminderType
  dueDate     DateTime
  isActive    Boolean       @default(true)
  userId      String
  vehicleId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle     Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  messages    Message[]
}

enum ReminderType {
  MOT
  TAX
  INSURANCE
  SERVICE
}

model Message {
  id          String        @id @default(cuid())
  type        MessageType
  content     String
  status      MessageStatus @default(PENDING)
  sentAt      DateTime?
  error       String?
  userId      String
  reminderId  String?
  garageId    String?
  createdAt   DateTime      @default(now())

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminder    Reminder?     @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  garage      Garage?       @relation(fields: [garageId], references: [id], onDelete: Cascade)
}

enum MessageType {
  SMS
  EMAIL
}

enum MessageStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String   @unique
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  plan                  PlanType
  status                SubscriptionStatus @default(ACTIVE)
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  usageCount            Int      @default(0)
  reminderLimit         Int?     // null for unlimited plans (DRIVER_FREE, DRIVER_PREMIUM, GARAGE_PREMIUM)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PlanType {
  DRIVER_FREE
  DRIVER_PREMIUM
  GARAGE_STARTER
  GARAGE_PRO
  GARAGE_PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
} 